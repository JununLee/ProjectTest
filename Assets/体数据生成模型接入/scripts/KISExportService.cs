/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MRMLScene.Bridge.Services
{
  public partial class KISExportService {
    public interface ISync {
      KISResultStr Ready();
      KISResultStr SpineDicom2Polydata(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox);
      KISResultListStr SpineDicom2Nifti(string dicomDir, string niftiDir);
      KISResultStr SpineDivPlane(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox);
      KISResultMatrix BrainsRegistration(string fileFixedImage, string fileMoveImage);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Ready(AsyncCallback callback, object state);
      KISResultStr End_Ready(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SpineDicom2Polydata(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox);
      KISResultStr End_SpineDicom2Polydata(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SpineDicom2Nifti(AsyncCallback callback, object state, string dicomDir, string niftiDir);
      KISResultListStr End_SpineDicom2Nifti(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SpineDivPlane(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox);
      KISResultStr End_SpineDivPlane(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_BrainsRegistration(AsyncCallback callback, object state, string fileFixedImage, string fileMoveImage);
      KISResultMatrix End_BrainsRegistration(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ready(AsyncCallback callback, object state)
      {
        return send_Ready(callback, state);
      }

      public KISResultStr End_Ready(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Ready();
      }

      #endif

      public KISResultStr Ready()
      {
        #if !SILVERLIGHT
        send_Ready();
        return recv_Ready();

        #else
        var asyncResult = Begin_Ready(null, null);
        return End_Ready(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ready(AsyncCallback callback, object state)
      #else
      public void send_Ready()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ready", TMessageType.Call, seqid_));
        Ready_args args = new Ready_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KISResultStr recv_Ready()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ready_result result = new Ready_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ready failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SpineDicom2Polydata(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      {
        return send_SpineDicom2Polydata(callback, state, filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
      }

      public KISResultStr End_SpineDicom2Polydata(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SpineDicom2Polydata();
      }

      #endif

      public KISResultStr SpineDicom2Polydata(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      {
        #if !SILVERLIGHT
        send_SpineDicom2Polydata(filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
        return recv_SpineDicom2Polydata();

        #else
        var asyncResult = Begin_SpineDicom2Polydata(null, null, filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
        return End_SpineDicom2Polydata(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SpineDicom2Polydata(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      #else
      public void send_SpineDicom2Polydata(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SpineDicom2Polydata", TMessageType.Call, seqid_));
        SpineDicom2Polydata_args args = new SpineDicom2Polydata_args();
        args.FilePath = filePath;
        args.W = W;
        args.L = L;
        args.X = x;
        args.Y = y;
        args.Z = z;
        args.XRadiusBox = xRadiusBox;
        args.YRadiusBox = yRadiusBox;
        args.ZRadiusBox = zRadiusBox;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KISResultStr recv_SpineDicom2Polydata()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SpineDicom2Polydata_result result = new SpineDicom2Polydata_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SpineDicom2Polydata failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SpineDicom2Nifti(AsyncCallback callback, object state, string dicomDir, string niftiDir)
      {
        return send_SpineDicom2Nifti(callback, state, dicomDir, niftiDir);
      }

      public KISResultListStr End_SpineDicom2Nifti(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SpineDicom2Nifti();
      }

      #endif

      public KISResultListStr SpineDicom2Nifti(string dicomDir, string niftiDir)
      {
        #if !SILVERLIGHT
        send_SpineDicom2Nifti(dicomDir, niftiDir);
        return recv_SpineDicom2Nifti();

        #else
        var asyncResult = Begin_SpineDicom2Nifti(null, null, dicomDir, niftiDir);
        return End_SpineDicom2Nifti(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SpineDicom2Nifti(AsyncCallback callback, object state, string dicomDir, string niftiDir)
      #else
      public void send_SpineDicom2Nifti(string dicomDir, string niftiDir)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SpineDicom2Nifti", TMessageType.Call, seqid_));
        SpineDicom2Nifti_args args = new SpineDicom2Nifti_args();
        args.DicomDir = dicomDir;
        args.NiftiDir = niftiDir;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KISResultListStr recv_SpineDicom2Nifti()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SpineDicom2Nifti_result result = new SpineDicom2Nifti_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SpineDicom2Nifti failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SpineDivPlane(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      {
        return send_SpineDivPlane(callback, state, filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
      }

      public KISResultStr End_SpineDivPlane(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SpineDivPlane();
      }

      #endif

      public KISResultStr SpineDivPlane(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      {
        #if !SILVERLIGHT
        send_SpineDivPlane(filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
        return recv_SpineDivPlane();

        #else
        var asyncResult = Begin_SpineDivPlane(null, null, filePath, W, L, x, y, z, xRadiusBox, yRadiusBox, zRadiusBox);
        return End_SpineDivPlane(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SpineDivPlane(AsyncCallback callback, object state, string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      #else
      public void send_SpineDivPlane(string filePath, int W, int L, double x, double y, double z, double xRadiusBox, double yRadiusBox, double zRadiusBox)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SpineDivPlane", TMessageType.Call, seqid_));
        SpineDivPlane_args args = new SpineDivPlane_args();
        args.FilePath = filePath;
        args.W = W;
        args.L = L;
        args.X = x;
        args.Y = y;
        args.Z = z;
        args.XRadiusBox = xRadiusBox;
        args.YRadiusBox = yRadiusBox;
        args.ZRadiusBox = zRadiusBox;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KISResultStr recv_SpineDivPlane()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SpineDivPlane_result result = new SpineDivPlane_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SpineDivPlane failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BrainsRegistration(AsyncCallback callback, object state, string fileFixedImage, string fileMoveImage)
      {
        return send_BrainsRegistration(callback, state, fileFixedImage, fileMoveImage);
      }

      public KISResultMatrix End_BrainsRegistration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BrainsRegistration();
      }

      #endif

      public KISResultMatrix BrainsRegistration(string fileFixedImage, string fileMoveImage)
      {
        #if !SILVERLIGHT
        send_BrainsRegistration(fileFixedImage, fileMoveImage);
        return recv_BrainsRegistration();

        #else
        var asyncResult = Begin_BrainsRegistration(null, null, fileFixedImage, fileMoveImage);
        return End_BrainsRegistration(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BrainsRegistration(AsyncCallback callback, object state, string fileFixedImage, string fileMoveImage)
      #else
      public void send_BrainsRegistration(string fileFixedImage, string fileMoveImage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BrainsRegistration", TMessageType.Call, seqid_));
        BrainsRegistration_args args = new BrainsRegistration_args();
        args.FileFixedImage = fileFixedImage;
        args.FileMoveImage = fileMoveImage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KISResultMatrix recv_BrainsRegistration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BrainsRegistration_result result = new BrainsRegistration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BrainsRegistration failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Ready"] = Ready_Process;
        processMap_["SpineDicom2Polydata"] = SpineDicom2Polydata_Process;
        processMap_["SpineDicom2Nifti"] = SpineDicom2Nifti_Process;
        processMap_["SpineDivPlane"] = SpineDivPlane_Process;
        processMap_["BrainsRegistration"] = BrainsRegistration_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ready_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ready_args args = new Ready_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ready_result result = new Ready_result();
        try
        {
          result.Success = iface_.Ready();
          oprot.WriteMessageBegin(new TMessage("Ready", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Ready", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SpineDicom2Polydata_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SpineDicom2Polydata_args args = new SpineDicom2Polydata_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SpineDicom2Polydata_result result = new SpineDicom2Polydata_result();
        try
        {
          result.Success = iface_.SpineDicom2Polydata(args.FilePath, args.W, args.L, args.X, args.Y, args.Z, args.XRadiusBox, args.YRadiusBox, args.ZRadiusBox);
          oprot.WriteMessageBegin(new TMessage("SpineDicom2Polydata", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SpineDicom2Polydata", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SpineDicom2Nifti_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SpineDicom2Nifti_args args = new SpineDicom2Nifti_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SpineDicom2Nifti_result result = new SpineDicom2Nifti_result();
        try
        {
          result.Success = iface_.SpineDicom2Nifti(args.DicomDir, args.NiftiDir);
          oprot.WriteMessageBegin(new TMessage("SpineDicom2Nifti", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SpineDicom2Nifti", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SpineDivPlane_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SpineDivPlane_args args = new SpineDivPlane_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SpineDivPlane_result result = new SpineDivPlane_result();
        try
        {
          result.Success = iface_.SpineDivPlane(args.FilePath, args.W, args.L, args.X, args.Y, args.Z, args.XRadiusBox, args.YRadiusBox, args.ZRadiusBox);
          oprot.WriteMessageBegin(new TMessage("SpineDivPlane", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SpineDivPlane", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BrainsRegistration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BrainsRegistration_args args = new BrainsRegistration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BrainsRegistration_result result = new BrainsRegistration_result();
        try
        {
          result.Success = iface_.BrainsRegistration(args.FileFixedImage, args.FileMoveImage);
          oprot.WriteMessageBegin(new TMessage("BrainsRegistration", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("BrainsRegistration", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ready_args : TBase
    {

      public Ready_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ready_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ready_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ready_result : TBase
    {
      private KISResultStr _success;

      public KISResultStr Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Ready_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new KISResultStr();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ready_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ready_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDicom2Polydata_args : TBase
    {
      private string _filePath;
      private int _W;
      private int _L;
      private double _x;
      private double _y;
      private double _z;
      private double _xRadiusBox;
      private double _yRadiusBox;
      private double _zRadiusBox;

      public string FilePath
      {
        get
        {
          return _filePath;
        }
        set
        {
          __isset.filePath = true;
          this._filePath = value;
        }
      }

      public int W
      {
        get
        {
          return _W;
        }
        set
        {
          __isset.W = true;
          this._W = value;
        }
      }

      public int L
      {
        get
        {
          return _L;
        }
        set
        {
          __isset.L = true;
          this._L = value;
        }
      }

      public double X
      {
        get
        {
          return _x;
        }
        set
        {
          __isset.x = true;
          this._x = value;
        }
      }

      public double Y
      {
        get
        {
          return _y;
        }
        set
        {
          __isset.y = true;
          this._y = value;
        }
      }

      public double Z
      {
        get
        {
          return _z;
        }
        set
        {
          __isset.z = true;
          this._z = value;
        }
      }

      public double XRadiusBox
      {
        get
        {
          return _xRadiusBox;
        }
        set
        {
          __isset.xRadiusBox = true;
          this._xRadiusBox = value;
        }
      }

      public double YRadiusBox
      {
        get
        {
          return _yRadiusBox;
        }
        set
        {
          __isset.yRadiusBox = true;
          this._yRadiusBox = value;
        }
      }

      public double ZRadiusBox
      {
        get
        {
          return _zRadiusBox;
        }
        set
        {
          __isset.zRadiusBox = true;
          this._zRadiusBox = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filePath;
        public bool W;
        public bool L;
        public bool x;
        public bool y;
        public bool z;
        public bool xRadiusBox;
        public bool yRadiusBox;
        public bool zRadiusBox;
      }

      public SpineDicom2Polydata_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FilePath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  W = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  L = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Double) {
                  X = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Double) {
                  Y = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Double) {
                  Z = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.Double) {
                  XRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.Double) {
                  YRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 9:
                if (field.Type == TType.Double) {
                  ZRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDicom2Polydata_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FilePath != null && __isset.filePath) {
            field.Name = "filePath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FilePath);
            oprot.WriteFieldEnd();
          }
          if (__isset.W) {
            field.Name = "W";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(W);
            oprot.WriteFieldEnd();
          }
          if (__isset.L) {
            field.Name = "L";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(L);
            oprot.WriteFieldEnd();
          }
          if (__isset.x) {
            field.Name = "x";
            field.Type = TType.Double;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(X);
            oprot.WriteFieldEnd();
          }
          if (__isset.y) {
            field.Name = "y";
            field.Type = TType.Double;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Y);
            oprot.WriteFieldEnd();
          }
          if (__isset.z) {
            field.Name = "z";
            field.Type = TType.Double;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Z);
            oprot.WriteFieldEnd();
          }
          if (__isset.xRadiusBox) {
            field.Name = "xRadiusBox";
            field.Type = TType.Double;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(XRadiusBox);
            oprot.WriteFieldEnd();
          }
          if (__isset.yRadiusBox) {
            field.Name = "yRadiusBox";
            field.Type = TType.Double;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(YRadiusBox);
            oprot.WriteFieldEnd();
          }
          if (__isset.zRadiusBox) {
            field.Name = "zRadiusBox";
            field.Type = TType.Double;
            field.ID = 9;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(ZRadiusBox);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDicom2Polydata_args(");
        bool __first = true;
        if (FilePath != null && __isset.filePath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FilePath: ");
          __sb.Append(FilePath);
        }
        if (__isset.W) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("W: ");
          __sb.Append(W);
        }
        if (__isset.L) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("L: ");
          __sb.Append(L);
        }
        if (__isset.x) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("X: ");
          __sb.Append(X);
        }
        if (__isset.y) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Y: ");
          __sb.Append(Y);
        }
        if (__isset.z) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Z: ");
          __sb.Append(Z);
        }
        if (__isset.xRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("XRadiusBox: ");
          __sb.Append(XRadiusBox);
        }
        if (__isset.yRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("YRadiusBox: ");
          __sb.Append(YRadiusBox);
        }
        if (__isset.zRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ZRadiusBox: ");
          __sb.Append(ZRadiusBox);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDicom2Polydata_result : TBase
    {
      private KISResultStr _success;

      public KISResultStr Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SpineDicom2Polydata_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new KISResultStr();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDicom2Polydata_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDicom2Polydata_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDicom2Nifti_args : TBase
    {
      private string _dicomDir;
      private string _niftiDir;

      public string DicomDir
      {
        get
        {
          return _dicomDir;
        }
        set
        {
          __isset.dicomDir = true;
          this._dicomDir = value;
        }
      }

      public string NiftiDir
      {
        get
        {
          return _niftiDir;
        }
        set
        {
          __isset.niftiDir = true;
          this._niftiDir = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dicomDir;
        public bool niftiDir;
      }

      public SpineDicom2Nifti_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DicomDir = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  NiftiDir = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDicom2Nifti_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DicomDir != null && __isset.dicomDir) {
            field.Name = "dicomDir";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DicomDir);
            oprot.WriteFieldEnd();
          }
          if (NiftiDir != null && __isset.niftiDir) {
            field.Name = "niftiDir";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NiftiDir);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDicom2Nifti_args(");
        bool __first = true;
        if (DicomDir != null && __isset.dicomDir) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DicomDir: ");
          __sb.Append(DicomDir);
        }
        if (NiftiDir != null && __isset.niftiDir) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NiftiDir: ");
          __sb.Append(NiftiDir);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDicom2Nifti_result : TBase
    {
      private KISResultListStr _success;

      public KISResultListStr Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SpineDicom2Nifti_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new KISResultListStr();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDicom2Nifti_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDicom2Nifti_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDivPlane_args : TBase
    {
      private string _filePath;
      private int _W;
      private int _L;
      private double _x;
      private double _y;
      private double _z;
      private double _xRadiusBox;
      private double _yRadiusBox;
      private double _zRadiusBox;

      public string FilePath
      {
        get
        {
          return _filePath;
        }
        set
        {
          __isset.filePath = true;
          this._filePath = value;
        }
      }

      public int W
      {
        get
        {
          return _W;
        }
        set
        {
          __isset.W = true;
          this._W = value;
        }
      }

      public int L
      {
        get
        {
          return _L;
        }
        set
        {
          __isset.L = true;
          this._L = value;
        }
      }

      public double X
      {
        get
        {
          return _x;
        }
        set
        {
          __isset.x = true;
          this._x = value;
        }
      }

      public double Y
      {
        get
        {
          return _y;
        }
        set
        {
          __isset.y = true;
          this._y = value;
        }
      }

      public double Z
      {
        get
        {
          return _z;
        }
        set
        {
          __isset.z = true;
          this._z = value;
        }
      }

      public double XRadiusBox
      {
        get
        {
          return _xRadiusBox;
        }
        set
        {
          __isset.xRadiusBox = true;
          this._xRadiusBox = value;
        }
      }

      public double YRadiusBox
      {
        get
        {
          return _yRadiusBox;
        }
        set
        {
          __isset.yRadiusBox = true;
          this._yRadiusBox = value;
        }
      }

      public double ZRadiusBox
      {
        get
        {
          return _zRadiusBox;
        }
        set
        {
          __isset.zRadiusBox = true;
          this._zRadiusBox = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filePath;
        public bool W;
        public bool L;
        public bool x;
        public bool y;
        public bool z;
        public bool xRadiusBox;
        public bool yRadiusBox;
        public bool zRadiusBox;
      }

      public SpineDivPlane_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FilePath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  W = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  L = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Double) {
                  X = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Double) {
                  Y = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Double) {
                  Z = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.Double) {
                  XRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.Double) {
                  YRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 9:
                if (field.Type == TType.Double) {
                  ZRadiusBox = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDivPlane_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FilePath != null && __isset.filePath) {
            field.Name = "filePath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FilePath);
            oprot.WriteFieldEnd();
          }
          if (__isset.W) {
            field.Name = "W";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(W);
            oprot.WriteFieldEnd();
          }
          if (__isset.L) {
            field.Name = "L";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(L);
            oprot.WriteFieldEnd();
          }
          if (__isset.x) {
            field.Name = "x";
            field.Type = TType.Double;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(X);
            oprot.WriteFieldEnd();
          }
          if (__isset.y) {
            field.Name = "y";
            field.Type = TType.Double;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Y);
            oprot.WriteFieldEnd();
          }
          if (__isset.z) {
            field.Name = "z";
            field.Type = TType.Double;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Z);
            oprot.WriteFieldEnd();
          }
          if (__isset.xRadiusBox) {
            field.Name = "xRadiusBox";
            field.Type = TType.Double;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(XRadiusBox);
            oprot.WriteFieldEnd();
          }
          if (__isset.yRadiusBox) {
            field.Name = "yRadiusBox";
            field.Type = TType.Double;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(YRadiusBox);
            oprot.WriteFieldEnd();
          }
          if (__isset.zRadiusBox) {
            field.Name = "zRadiusBox";
            field.Type = TType.Double;
            field.ID = 9;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(ZRadiusBox);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDivPlane_args(");
        bool __first = true;
        if (FilePath != null && __isset.filePath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FilePath: ");
          __sb.Append(FilePath);
        }
        if (__isset.W) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("W: ");
          __sb.Append(W);
        }
        if (__isset.L) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("L: ");
          __sb.Append(L);
        }
        if (__isset.x) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("X: ");
          __sb.Append(X);
        }
        if (__isset.y) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Y: ");
          __sb.Append(Y);
        }
        if (__isset.z) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Z: ");
          __sb.Append(Z);
        }
        if (__isset.xRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("XRadiusBox: ");
          __sb.Append(XRadiusBox);
        }
        if (__isset.yRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("YRadiusBox: ");
          __sb.Append(YRadiusBox);
        }
        if (__isset.zRadiusBox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ZRadiusBox: ");
          __sb.Append(ZRadiusBox);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SpineDivPlane_result : TBase
    {
      private KISResultStr _success;

      public KISResultStr Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SpineDivPlane_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new KISResultStr();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SpineDivPlane_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SpineDivPlane_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BrainsRegistration_args : TBase
    {
      private string _fileFixedImage;
      private string _fileMoveImage;

      public string FileFixedImage
      {
        get
        {
          return _fileFixedImage;
        }
        set
        {
          __isset.fileFixedImage = true;
          this._fileFixedImage = value;
        }
      }

      public string FileMoveImage
      {
        get
        {
          return _fileMoveImage;
        }
        set
        {
          __isset.fileMoveImage = true;
          this._fileMoveImage = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fileFixedImage;
        public bool fileMoveImage;
      }

      public BrainsRegistration_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FileFixedImage = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FileMoveImage = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BrainsRegistration_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FileFixedImage != null && __isset.fileFixedImage) {
            field.Name = "fileFixedImage";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FileFixedImage);
            oprot.WriteFieldEnd();
          }
          if (FileMoveImage != null && __isset.fileMoveImage) {
            field.Name = "fileMoveImage";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FileMoveImage);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BrainsRegistration_args(");
        bool __first = true;
        if (FileFixedImage != null && __isset.fileFixedImage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FileFixedImage: ");
          __sb.Append(FileFixedImage);
        }
        if (FileMoveImage != null && __isset.fileMoveImage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FileMoveImage: ");
          __sb.Append(FileMoveImage);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BrainsRegistration_result : TBase
    {
      private KISResultMatrix _success;

      public KISResultMatrix Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BrainsRegistration_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new KISResultMatrix();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BrainsRegistration_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BrainsRegistration_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
